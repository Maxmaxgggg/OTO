%           linprog
%   Функция возвращает решение задачи линейного программирования

%% Задаем целевую функцию
 % Вектор коэффициентов линейной целевой функции
f = [-5; -4; -6];

%% Задаем ограничения
% Матрица коэффициентов линейных ограничений-неравенств (три уравнения)
A = [1 -1 1; 3 2 4; 3 2 0];
% Вектор ограничений-неравенств
b = [20; 42; 30];
% Задание нижних границ переменных (нулей)
lb = zeros(3,1);

%% Решаем задачу оптимизации
% Поиск решения
% x - найденая точка оптимума
% fval - значение целевой функции в точке оптимума
% exitflag - флаг, который показывает, что вычисления завершились нахождением решения
% output - предоставляет дополнительные сведения:
%   iterations - число итераций алгоритма
%   constrviolation - представляет собой информацию о том, 
%   насколько сильно были нарушены ограничения в процессе решения задачи оптимизации
%   algorithm - используемый алгоритм
%   firstorderopt - значение градиента целевой функции в т.о.
% lambda - предоставляет дополнительные сведения о множителях Лагранжа
%   lower - множители Лагранжа, связанные с ограничениями на нижние границы переменных.
%   upper - множители Лагранжа, связанные с ограничениями на верхние границы переменных.
%   eqlin - множители Лагранжа, связанные с линейными равенствами.
%   ineqlin - множители Лагранжа, связанные с нелинейными неравенствами.
% В данном вызове вместо матриц Aeq и beq передаем пустые матрицы
[x,fval,exitflag,output,lambda] = linprog(f,A,b,[], [], lb)
